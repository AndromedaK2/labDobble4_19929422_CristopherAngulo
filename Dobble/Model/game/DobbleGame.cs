using Model.card;
using Model.dobble;
using Model.game;
using Model.mode;
using Model.player;
using Model.turn;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Model.game
{
	public class DobbleGame : IDobbleGame
	{
		#region attributes

		/// <summary>
		/// @description represent unique value to identify. Id is generated by a random function </summary>
		/// <seealso cref="Helper"/>
		public int Id { get; set; }


		#endregion

		#region Getter and Setters


		/// <summary>
		/// @description game status is represented by an enum (CREATED, STARTED, FINISHED) </summary>
		/// <seealso cref="DobbleGameStatus"/>
		public DobbleGameStatus GameStatus { get; set; } = DobbleGameStatus.CREATED;

		/// <summary>
		/// @implNote get Name of game </summary>
		/// <returns> Name of game </returns>
		public string Name { get; }

		/// <summary>
		/// @implNote get Name of game </summary>
		/// <returns> Name of game </returns>
		public Dobble Dobble { get; set; }

		/// <summary>
		/// @implNote  get game Players </summary>
		/// <returns> Players </returns>

		public List<Player> Players { get; set; }



		/// <summary>
		/// @implNote  get status </summary>
		/// <returns> Dobble game status (FINISHED,STARTED,CREATED) </returns>

		public DobbleGameStatus Status { get; set; }


		/// <summary>
		/// @implNote  get all Turns in the game </summary>
		/// <returns> Turns </returns>

		public List<Turn> Turns { get; set; }


		/// <summary>
		/// @implNote  get Players number </summary>
		/// <returns> Players number
		///  </returns>

		public int PlayersNumber { get; }


		/// <summary>
		/// @implNote  get Dobble game Mode </summary>
		/// <returns> Dobble game Mode </returns>
		public DobbleGameMode DobbleGameMode { get; set; }


		/// <summary>
		/// @implNote  get cards zone </summary>
		/// <returns> cards </returns>
		public List<Card> CardsZone { get; set; }

		/// <summary>
		/// @implNote  get game Mode </summary>
		/// <returns> Mode </returns>

		public IMode Mode { get; set; }

		//endregion

		//region constructor

		/// <summary>
		/// Default Constructor
		/// </summary>
		public DobbleGame()
		{

		}

		/// <param Name="elements"> </param>
		/// <param Name="elementsPerCard"> </param>
		/// <param Name="maximumTotalCards"> </param>
		/// <param Name="DobbleGameMode"> </param>
		/// <param Name="PlayersNumber"> </param>
		/// <param Name="Name"> </param>
		/// <param Name="Players"> </param>
		/// <param Name="Turns"> </param>

		public DobbleGame(List<object> elements, int elementsPerCard, int maximumTotalCards, DobbleGameMode DobbleGameMode, int PlayersNumber, string Name, List<Player> Players, List<Turn> Turns)
		{
			this.Id = Helper.generateRandomNumber(1, 1000);
			this.PlayersNumber = PlayersNumber;
			this.Dobble = new Dobble(elements, elementsPerCard, maximumTotalCards);
			this.DobbleGameMode = DobbleGameMode;
			this.Name = Name;
			this.Players = Players;
			this.Turns = Turns;
			this.SetMode(DobbleGameMode);
		}

		/// <param Name="elements"> </param>
		/// <param Name="elementsPerCard"> </param>
		/// <param Name="maximumTotalCards"> </param>
		/// <param Name="DobbleGameMode"> </param>
		/// <param Name="PlayersNumber"> </param>
		/// <param Name="Name"> </param>
		public DobbleGame(List<object> elements, int elementsPerCard, int maximumTotalCards, DobbleGameMode DobbleGameMode, int PlayersNumber, string Name)
		{
			this.Id = Helper.generateRandomNumber(1, 1000);
			this.PlayersNumber = PlayersNumber;
			this.Dobble = new Dobble(elements, elementsPerCard, maximumTotalCards);
			this.DobbleGameMode = DobbleGameMode;
			this.Name = Name;
			this.SetMode(DobbleGameMode);

		}
		// endregion

		// region public methods

		/// <summary>
		/// @implNote get first turn </summary>
		/// <returns> a turn </returns>
		public Turn WhoseIsTurn()
		{
			return this.Turns[0];

		}


		/// <summary>
		/// @implNote this method register player with his username in the game
		/// It also set up his turn. </summary>
		/// <param Name="username"> </param>
		/// <returns> true if method could register or false the opposite </returns>
		public string Register(string username)
		{
			Player player = new Player(username);
			if (this.Players.Contains(player))
			{
				return "jugador ya existe";
			}
			if (this.PlayersNumber < this.Players.Count)
			{
				return "no se puede registrar";
			}
			this.Players.Add(player);
			Turn turn = new(player);
			this.Turns.Add(turn);
			return "jugador registrado";

		}


		/// <summary>
		/// @implNote  set Mode
		/// </summary>
		public void SetMode(DobbleGameMode DobbleGameMode)
		{

			switch (DobbleGameMode)
			{
				case DobbleGameMode.STACKMODE:
                    this.Mode = new StackMode();
					break;
			}
			
		}


		public  void StartGame()
		{
			this.Mode.StartGame(this);
		}

		/// <summary>
		/// @implNote this method use Mode to call spotit.It also
		/// updates player card, reset cards zone, reset Dobble cards and continue with next turn </summary>
		/// <seealso cref="IMode"/>
		/// <returns> true if player fin common element between cards or false if it is the opposite </returns>
		public bool Spotit(object element) 
		{
			bool spotit = this.Mode.Spotit(element, this.CardsZone);
			if (spotit)
			{
				Player player = WhoseIsTurn().Player;
				int playerIndex = this.Players.IndexOf(player);
				player = this.Mode.UpdatePlayerCards(player, this.CardsZone);
				this.Players[playerIndex] = player;
				this.ResetCardsZone();
				this.NextTurn();
				return true;

			}
			this.ResetDobbleCards();
			this.ResetCardsZone();
			this.NextTurn();
			return false;

		}

		/// <summary>
		/// @implNote this method execute pass turn when player skip his turn.
		/// it also updates Turns and reset cards
		/// </summary>
		public void PassTurn()
		{ 
			this.ResetDobbleCards();
			this.ResetCardsZone();
			Turn currentTurn = WhoseIsTurn();
			int turnIndex = this.Turns.IndexOf(currentTurn);
			this.Turns.RemoveAt(turnIndex);
			this.Turns.Add(currentTurn);
		}

		/// <summary>
		/// @implNote  this method continue with next turn
		/// </summary>
		public void NextTurn()
		{
			Turn currentTurn = WhoseIsTurn();
			int turnIndex = this.Turns.IndexOf(currentTurn);
			this.Turns.RemoveAt(turnIndex);
			this.Turns.Add(currentTurn);
		}

		/// <summary>
		/// @implNote this method reset Dobble cards using Mode
		/// </summary>
		public void ResetDobbleCards()
		{
		//	this.Dobble.DobbleCards.setDobbleCards(this.Mode.resetDobbleCards(this.DobbleCards.getDobbleCards(), this.cardsZone));
		}
		 
		/// <summary>
		/// @implNote  this method reset cards zone using Mode
		/// </summary>
		public void ResetCardsZone()
		{
			this.CardsZone = this.Mode.ResetCardsZone(this.CardsZone);
		}

		/// <summary>
		/// @implNote  this methods get player who win the match </summary>
		/// <returns> player string format </returns>

		public string Winner ()
		{

			Player player = this.Mode.GetWinner(this.Players);
			if (player.Points > 0)
			{
				return player.ToString();
			}
			else
			{
				return "No hay ganador";
			}
			
		}

		/// <summary>
		/// @implNote  this method finish the game
		/// </summary>
		public  void EndGame() 
		{
			this.Mode.EndGame(this);
		}

		/// <summary>
		/// @implNote  this method is overriding to return a Dobble game string </summary>
		/// <returns> Dobble game in a string format </returns>
		public override string ToString()
		{
			return "\nInformacion del Juego Dobble:\n" + "- id: " + Id + "\n" + "- nombre: " + Name + "\n" + "- estado: " + GameStatus + "\n" + "- jugadores: " + Players + "\n" + "- numero de jugadores:" + PlayersNumber + "\n" + "- zona de juego:" + CardsZone + "\n" + "- " + Dobble.DobbleCards + "\n";

		}

		/// <summary>
		/// @implNote verify if 2 objects are equals accord properties and others validations </summary>
		/// <param Name="o"> any object </param>
		/// <returns> true if objects are equals or false if objects are not equals </returns>


		#endregion

	}


}